plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

sourceCompatibility = 1.8

group 'io.reactivex.eclipse'
version = '0.3.0'

dependencies {
	api 'org.eclipse.platform:org.eclipse.core.runtime:3.13.0'
	api 'org.eclipse.platform:org.eclipse.core.jobs:3.9.1'
	api 'org.eclipse.platform:org.eclipse.jface:3.13.1'
	api "org.eclipse.platform:org.eclipse.swt:3.106.1"

	implementation 'io.reactivex.rxjava2:rxjava:2.1.7'

	testImplementation 'junit:junit:4.12'
	testImplementation 'org.awaitility:awaitility:2.0.0'
}

jar.doFirst {
    manifest {
        def manifestFile = "${projectDir}/META-INF/MANIFEST.MF"
        if ( new File( manifestFile ).exists() )
            from ( manifestFile )

        attributes 'Build-date': new Date();
        attributes 'Application-Version': project.version
        attributes 'Bundle-Version': project.version
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "simon-scholz"
            name "Simon Scholz"
            email "simon.scholz@vogella.com"
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
	publications {
		RxEclipse(MavenPublication) {
			from components.java
 			artifact sourcesJar
 			artifact javadocJar
            groupId 'io.reactivex.eclipse'
    		artifactId 'rxeclipse'
    		version '0.3.0'
    		pom.withXml {
                def root = asNode()
                root.appendNode('description', 'RxEclipse for the usage of RxJava with Eclipse')
                root.appendNode('name', 'RxEclipse')
                root.appendNode('url', 'https://github.com/SimonScholz/RxSWT')
                root.children().last() + pomConfig
            }
		}
	}
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
	publications = ['RxEclipse']
	publish = true
	pkg {
		repo = 'RxJava-Extensions'
		name = 'RxEclipse'
		licenses = ['Apache-2.0']
		vcsUrl = 'https://github.com/SimonScholz/RxSWT.git'
		githubRepo = 'https://github.com/SimonScholz/RxSWT'
		publicDownloadNumbers = true
		version {
        	name = '0.3.0'
        	desc = 'RxEclipse for the usage of RxJava with Eclipse'
        	released  = new Date()
        	vcsTag = '0.3.0'
 	   }
	}
}

task GCandMem(dependsOn: 'check') {
	doLast{
		System.gc()
	    	Thread.sleep(200)
	    	print("Memory usage: ")
	    	println(java.lang.management.ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() / 1024.0 / 1024.0)
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
	}
}

jacocoTestReport.dependsOn GCandMem

build.dependsOn jacocoTestReport

